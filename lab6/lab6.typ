#import "@preview/oxifmt:0.2.1": strfmt

#set text(size: 12pt)
#set text(lang: "ru")

#let title(
  subject,
  lab_number,
  variant,
  student,
  group,
  teacher,
  city: "Санкт-Петербург",
) = [
  #set align(center)
  #set block(above: 20pt)

  #let inline(body) = box(baseline: 12pt)[#body]
  #let undertitle(title, width: auto, body) = {
    layout(size => {
      stack(
        dir: ttb,
        body,
        block(
          inset: (y: 3pt),
          line(
            length: if width == auto {
              measure(body).width
            } else {
              width
            },
            stroke: .5pt,
          ),
        ),
        text(size: 9pt)[(#title)],
      )
    })
  }

  #grid(
    rows: (1fr, auto),
    [
      #text(size: 12pt)[Федеральное государственное автономное образовательное учреждение высшего образования «Национальный исследовательский университет ИТМО»]

      #block(above: 30pt, below: 40pt)[
        #text(size: 12pt)[Факультет программной инженерии и компьютерной техники]
      ]

      #text(size: 12pt)[#subject]

      #text(size: 12pt)[Отчет по лабораторной работе #lab_number]

      #block(above: 40pt)[
        #text(size: 12pt)[Вариант #variant]
      ]
    ],
    [
      #align(right)[
        #text(size: 12pt)[Выполнил:]

        #text(size: 12pt)[_ #student _ ]

        #text(size: 12pt)[#group]

        #text(size: 12pt)[Проверила:]

        #text(size: 12pt)[_ #teacher _]

        #block(above: 40pt)[]
      ]
    ],
    [#city, #datetime.today().year()]
  )
]

#title(
  "Вычислительная математика",
  text[
    №6

    Решение ОДУ
  ],
  10,
  "Козлов Василий Сергеевич",
  "P3215",
  "Малышева Татьяна Алексеевна",
)

#set heading(numbering: "1.")
// #show heading: it => text(it.body)
#outline()

#pagebreak()

#set page(
  numbering: (..x) => numbering("1", x.pos().at(0)),
  number-align: center,
)

= Цель лабораторной работы

#par(first-line-indent: (amount: 1.25em, all: true),justify: false)[
  Решить задачу Коши для обыкновенных дифференциальных уравнений численными методами.
]

#pagebreak()

= Решение ОДУ методом Эйлера
#par(first-line-indent: (amount: 1.25em, all: true),justify: false)[
  Метод Эйлера относится к одношаговым итерационным методам численного решение ОДУ.
]

#par(first-line-indent: (amount: 1.25em, all: true), justify: false)[
  Рабочая формула метода: $y_n = y_(n - 1) + h f(x_(n-1), y_(n-1))$. Рассмотрим численное решение задачи Коши: $y' = x + y", " y(0) = 1, x in [0, 1]$. Точное решение задачи: $y = 2 e^x - x - 1$.
]


#table(
  columns: (1fr, 1fr, 1fr, 1fr, 1fr, 1fr),
  align: horizon + center,
  rows: (3em, 2em),
  [i], [$x_i$], [$y_i$], [$f(x_i, y_i)$], [Точное решение], [Погрешность],
  [0], [0], [1], [1], [1], [0],
  [1], [0.2], [1.2], [1.4], [1.24], [0.04],
  [2], [0.4], [1.48], [1.88], [1.58], [0.1],
  [3], [0.6], [1.86], [2.46], [2.04], [0.18],
  [4], [0.8], [2.35], [3.15], [2.65], [0.3],
  [5], [1.0], [2.98], [3.98], [3.44], [0.46],
)

#pagebreak()
= Решение ОДУ методом Рунге-Кутта четвертого порядка
#par(first-line-indent: (amount: 1.25em, all: true), justify: false)[
  Метод Рунге-Кутта также относится к одношаговым итерационным методам численного решение ОДУ.
]

#par(first-line-indent: (amount: 1.25em, all: true), justify: false)[
  Рабочая формула метода:
]

$
  y_(i + 1) = y_i + 1/6 (k_1 + 2k_2 + 2k_3 + k_4) \
  k_1 = h dot f(x_i, y_i) \
  k_2 = h dot f(x_i + h/2, y_i + k_1/2) \
  k_3 = h dot f(x_i + h/2, y_i + k_2/2) \
  k_4 = h dot f(x_i + h, y_i + k_3) \
$

#table(
  columns: (1fr, 1fr, 1fr, 1fr),
  align: horizon + center,
  rows: (3em, 2em),
  [i], [$x_i$], [$y_i$],[Точное решение], 
  [0], [0], [1], [1],
  [1], [0.2], [1.24], [1.24], 
  [2], [0.4], [1.58],  [1.58],
  [3], [0.6], [2.04],  [2.04],
  [4], [0.8], [2.65],  [2.65],
  [5], [1.0], [3.44],  [3.44],
)

#pagebreak()

= Решение ОДУ методом Милна
#par(first-line-indent: (amount: 1.25em, all: true), justify: false)[
  Метод Милна относится к многошаговым методам решение ОДУ. В начале требуется задать решение в трех первых точках, которые можно получить одношаговым методом Рунге-Кутта.
]

Вычислительные формулы:
$
  y_i^"прогн" = y_(i - 4) + (4h)/3 (2f_(i - 3) - f_(i - 2) + 2f_(i - 1))
$

$
  y_i^"корр" = y_(i_2) + h/3 dot (f_(i - 2) + 4 f_(i - 1) + f_i^"прогн") \
  f_i^"прогн" = f(x_i, y_i^"прогн")
$

#par(first-line-indent: (amount: 1.25em, all: true), justify: false)[
На этапе коррекции высчитывается $y_i^"корр"$, если $abs(y_i^"корр" - y_i^"прогн") < epsilon$, то коррекция выполнена, переходим к следующему $x_i$, иначе $y_i^"прогн" = y_i^"корр"$ и этап коррекции начинается заново.
]

#table(
  columns: (1fr, 1fr, 1fr, 1fr),
  align: horizon + center,
  rows: (3em, 2em),
  [i], [$x_i$], [$y_i$],[Точное решение], 
  [0], [0], [1], [1],
  [1], [0.2], [1.24], [1.24], 
  [2], [0.4], [1.58],  [1.58],
  [3], [0.6], [2.04],  [2.04],
  [4], [0.8], [2.65],  [2.65],
  [5], [1.0], [3.44],  [3.44],
)

#pagebreak()

= Код программы

https://github.com/Vaskozlov/numeric-methods/tree/main/lab6

#pagebreak()

= Примеры

== Пример 1
#image("images/Euler 1.png")

#image("images/Runge-Kutta 1.png")

#image("images/Milna 1.png")

Вывод программы:
```
Solving simple Euler:
   i      x_i      y_i  f(x_i, y_i)        Δ       ΔC
   0        1       -1            1        0     -0.1
   1      1.2     -0.8        0.608   0.0333   -0.046
   2      1.4   -0.678        0.426   0.0359   -0.027
   3      1.6   -0.593        0.322   0.0318  -0.0186
   4      1.8   -0.529        0.254   0.0267  -0.0142
   5        2   -0.478        0.207    0.022  -0.0116
   6      2.2   -0.437        0.173    0.018 -0.00987
   7      2.4   -0.402        0.147   0.0148 -0.00864
   8      2.6   -0.372        0.127   0.0122 -0.00771
   9      2.8   -0.347        0.111   0.0101 -0.00695
  10        3   -0.325       0.0974  0.00842 -0.00632
Euler method r: 7.949769e-04
```

```
Solving Runge-Kutta:
   i      x_i      y_i       k1       k2       k3       k4        Δ       ΔC
   0        1       -1      0.2     0.16    0.171    0.136        0 -0.00606
   1      1.2   -0.833    0.139    0.116    0.122    0.101 6.34e-05 -0.00428
   2      1.4   -0.714    0.102   0.0873   0.0908   0.0775 6.82e-05 -0.00318
   3      1.6   -0.625   0.0782   0.0682   0.0704   0.0614 5.88e-05 -0.00245
   4      1.8   -0.556   0.0617   0.0548   0.0562   0.0498 4.73e-05 -0.00195
   5        2     -0.5     0.05   0.0449   0.0459   0.0412 3.71e-05 -0.00159
   6      2.2   -0.455   0.0413   0.0375   0.0382   0.0346 2.89e-05 -0.00132
   7      2.4   -0.417   0.0347   0.0318   0.0323   0.0295 2.25e-05 -0.00111
   8      2.6   -0.385   0.0296   0.0272   0.0277   0.0255 1.75e-05 -0.000951
   9      2.8   -0.357   0.0255   0.0236    0.024   0.0222 1.37e-05 -0.000822
  10        3   -0.333   0.0222   0.0207   0.0209   0.0195 1.08e-05 -0.000718
Runge-Kutta method r: -6.755193e-08
```

#pagebreak()

```
Solving Milna:
Solving Runge-Kutta:
   i      x_i      y_i  f(x_i, y_i)        Δ
   0        1       -1            1        0
   1      1.2   -0.833        0.695 6.34e-05
   2      1.4   -0.714         0.51 6.82e-05
Iterations with correction
   3      1.6   -0.625        0.309 5.88e-05
   4      1.8   -0.556         0.25  8.5e-06
   5        2     -0.5        0.207 3.52e-05
   6      2.2   -0.455        0.174 2.33e-05
   7      2.4   -0.417        0.148 3.84e-05
   8      2.6   -0.385        0.128 4.32e-05
   9      2.8   -0.357        0.111 4.91e-05
  10        3   -0.333       0.0978 5.18e-05
```

#pagebreak()

#image("images/Euler 2.png")

#image("images/Euler 2 small h.png")

#image("images/Runge-Kutta 2.png")

#image("images/Milna 2.png")

```
Solving simple Euler:
   i      x_i      y_i  f(x_i, y_i)        Δ       ΔC
   0        0        1            1        0     -0.1
   1      0.2      1.2          1.4   0.0428   -0.162
   2      0.4     1.48         1.88    0.104   -0.241
   3      0.6     1.86         2.46    0.188   -0.341
   4      0.8     2.35         3.15    0.304    -0.14
   5        1     2.98         3.98     0.46   -0.211
   6      1.2     3.77         4.97    0.668   -0.305
   7      1.4     4.77         6.17    0.944   -0.429
   8      1.6        6          7.6     1.31    -0.59
   9      1.8     7.52         9.32     1.78     -0.8
  10        2     9.38     2.39
Euler method r: -1.071527e+00

Solving Runge-Kutta:
   i      x_i      y_i       k1       k2       k3       k4        Δ       ΔC
   0        0        1      0.2     0.24    0.244    0.289        0 -0.00736
   1      0.2     1.24    0.289    0.337    0.342    0.397 5.52e-06  -0.0105
   2      0.4     1.58    0.397    0.456    0.462    0.529 1.35e-05  -0.0143
   3      0.6     2.04    0.529    0.602    0.609    0.691 2.46e-05  -0.0189
   4      0.8     2.65     0.69    0.779    0.788    0.888 3.99e-05 -2.48e-06
   5        1     3.44    0.887    0.996     1.01     1.13  6.1e-05 -3.8e-06
   6      1.2     4.44     1.13     1.26     1.27     1.42 8.96e-05 -5.56e-06
   7      1.4     5.71     1.42     1.58      1.6     1.78 0.000128 -7.92e-06
   8      1.6     7.31     1.78     1.98        2     2.22 0.000179 -1.11e-05
   9      1.8      9.3     2.22     2.46     2.49     2.76 0.000247 -1.53e-05
  10        2     11.8 0.000335
Runge-Kutta method r: -2.079010e-05

Solving Milna:
Solving Runge-Kutta:
   i      x_i      y_i  f(x_i, y_i)        Δ
   0        0        1            1        0
   1      0.2     1.24         1.44 5.52e-06
   2      0.4     1.58         1.98 1.35e-05
Iterations with correction
   3      0.6     2.04         3.45 2.46e-05
   4      0.8     2.65         4.44 9.87e-06
   5        1     3.44         5.64 1.54e-05
   6      1.2     4.44         7.11 2.93e-06
   7      1.4     5.71         8.91 5.21e-06
   8      1.6     7.31         11.1 3.19e-05
   9      1.8      9.3         13.8  4.8e-05
  10        2     11.8         13.8 9.04e-05
  ```

#image("images/Euler 3.png")

#image("images/Euler 3 small h.png")

#image("images/Runge-Kutta 3.png")

#image("images/Milna 3.png")

#pagebreak()

```
Solving simple Euler:
   i      x_i      y_i  f(x_i, y_i)        Δ       ΔC
   0        0        2            2        0     -0.2
   1      0.2      2.4         2.35   0.0396   -0.256
   2      0.4     2.87         2.64   0.0818   -0.307
   3      0.6      3.4         2.81    0.118   -0.343
   4      0.8     3.96         2.76    0.138  -0.0678
   5        1     4.51         2.44    0.127  -0.0644
   6      1.2        5         1.81   0.0797  -0.0429
   7      1.4     5.36        0.911  0.00402 -0.00305
   8      1.6     5.54       -0.162     0.11   0.0494
   9      1.8     5.51        -1.25    0.216    0.104
  10        2     5.26    0.296
Euler method r: 1.469827e-01

Solving Runge-Kutta:
   i      x_i      y_i       k1       k2       k3       k4        Δ       ΔC
   0        0        2      0.4    0.438    0.442    0.479        0   -0.014
   1      0.2     2.44    0.478    0.512    0.515    0.544 5.53e-06  -0.0165
   2      0.4     2.95    0.544    0.566    0.568    0.581 1.25e-05  -0.0185
   3      0.6     3.52    0.581    0.582    0.583    0.571 1.96e-05  -0.0194
   4      0.8      4.1    0.571    0.545    0.543    0.502 2.59e-05 -1.62e-06
   5        1     4.64    0.501    0.444    0.441    0.368 3.06e-05 -1.91e-06
   6      1.2     5.08    0.368    0.282    0.279    0.182 3.42e-05 -2.13e-06
   7      1.4     5.36    0.182   0.0771   0.0763  -0.0317 3.65e-05 -2.26e-06
   8      1.6     5.43  -0.0317    -0.14   -0.138   -0.241 3.71e-05 -2.29e-06
   9      1.8      5.3   -0.241   -0.335   -0.332   -0.413 3.62e-05 -2.23e-06
  10        2     4.97 3.46e-05
Runge-Kutta method r: -2.129873e-06

Solving Milna:
Solving Runge-Kutta:
   i      x_i      y_i  f(x_i, y_i)        Δ
   0        0        2            2        0
   1      0.2     2.44         2.39 5.53e-06
   2      0.4     2.95         2.72 1.25e-05
Iterations with correction
   3      0.6     3.52         2.86 1.96e-05
   4      0.8      4.1         2.51 2.71e-05
   5        1     4.64         1.84 0.000101
   6      1.2     5.08        0.911 0.000212
   7      1.4     5.36       -0.159 0.000291
   8      1.6     5.43         -1.2 0.000324
   9      1.8      5.3        -2.07  0.00027
  10        2     4.97        -2.07 0.000182
```

#pagebreak()

= Вывод

#par(first-line-indent: (amount: 1.25em, all: true), justify: false)[
  В ходе выполнения лабораторной работы была реализована программа по численному решение задач Коши для обыкновенных дифференциальных уравнений.
]

#par(first-line-indent: (amount: 1.25em, all: true), justify: false)[
  Численное решение ОДУ методом Эйлера дает большую погрешность при вычислении, но требует меньше всего операций. Метод Рунге-Кутта четвертого порядка обеспечивает высокую точность вычислений, даже при сравнительно большой шаге. Многошаговый метод Милна сопоставим по точности с методом Рунге-Кутта четвертого порядка. Я считаю метод Рунге-Кутта четвертого порядка наиболее оптимальным, так как он просто в реализации, а также нет необходимости сравнивать дробные числа с $epsilon$.
]
